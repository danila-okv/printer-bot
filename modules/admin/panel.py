from aiogram import Router, types
from modules.decorators import admin_only
from modules.users.banlist import ban_user, unban_user
from modules.ui.keyboards.tracker import send_managed_message
from aiogram.filters import Command
from modules.admin.bot_control import (
    set_pause, clear_pause,
    pop_all_queued_actions
)

router = Router()

@router.message(Command("ban"))
@admin_only
async def cmd_ban(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban [user_id] [–ø—Ä–∏—á–∏–Ω–∞]"
        )
    user_id, reason = parts[1], parts[2]
    try:
        uid = int(user_id)
        ban_user(uid, reason)
        await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n<i>{reason}</i>"
        )
    except ValueError:
        await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text="–ù–µ–≤–µ—Ä–Ω—ã–π user_id. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        )

@router.message(Command("unban"))
@admin_only
async def cmd_unban(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban [user_id]"
        )
    try:
        uid = int(parts[1])
        unban_user(uid)
        await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )
    except ValueError:
        await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text="–ù–µ–≤–µ—Ä–Ω—ã–π user_id. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        )

@router.message(Command("pause"))
@admin_only
async def cmd_pause(message: types.Message):
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏—á–∏–Ω—É (–≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
    reason = message.text.partition(' ')[2].strip() or "ü§ñ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã"
    set_pause(reason)
    await message.reply(f"‚è∏Ô∏è –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑–∞.\n–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>")

@router.message(Command("resume"))
@admin_only
async def cmd_resume(message: types.Message):
    clear_pause()
    await message.reply("‚ñ∂Ô∏è –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É.")

    # –í—ã—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –ë–î
    actions = pop_all_queued_actions()

    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id
    user_ids = {act['user_id'] for act in actions}

    # –®–ª—ë–º –æ–¥–Ω–æ–º—É —Ä–∞–∑—É –Ω–∞ –∫–∞–∂–¥–æ–≥–æ
    for uid in user_ids:
        await send_managed_message(
            message.bot,
            uid,
            text="‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ –¥–µ–ª–µ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ - –¥–∞—Ä—é —Ç–µ–±–µ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü üéâ"
        )