# modules/admin/printer.py

from aiogram import Router, types
from aiogram.filters import Command
from modules.decorators import admin_only
from modules.printing.printer_status import (
    get_printer_status,
    get_printer_latency,
    get_printer_diagnostics,
    list_printers,
    get_printer_ips
)

router = Router()

@router.message(Command("printer"))
@admin_only
async def cmd_printer(message: types.Message):
    """
    /printer <list|ping|status|diagnostic>
    """
    arg = message.text.removeprefix("/printer").strip().lower()

    if not arg or arg == "help":
        return await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/printer list       ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –∏—Ö IP\n"
            "/printer ping       ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "/printer status     ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "/printer diagnostic ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞"
        )

    if arg == "list":
        printers = list_printers()
        ips = get_printer_ips()
        if not printers:
            return await message.reply("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞.")
        lines = []
        for name, uri in printers.items():
            ip = ips.get(name) or "‚Äì"
            lines.append(f"‚Ä¢ <b>{name}</b>\n  URI: <code>{uri}</code>\n  IP: <code>{ip}</code>")
        return await message.reply("üñ®Ô∏è <b>–°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:</b>\n" + "\n\n".join(lines))

    if arg == "ping":
        lat = get_printer_latency()
        if lat is None:
            return await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∏–Ω–≥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä.")
        return await message.reply(f"üèì –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {lat:.1f} ms")

    if arg == "status":
        status = get_printer_status()
        icons = {"idle": "üü¢", "printing": "üü°", "disabled": "‚ùå"}
        icon = icons.get(status, "‚ùì")
        return await message.reply(f"{icon} –°—Ç–∞—Ç—É—Å: <b>{status}</b>")

    if arg == "diagnostic":
        diag = get_printer_diagnostics()
        lines = [
            f"üñ® –ü—Ä–∏–Ω—Ç–µ—Ä: {diag['default_printer']}",
            f"üì∂ –°—Ç–∞—Ç—É—Å CUPS: {diag['status']}",
            f"üèì –ü–∏–Ω–≥: {diag['latency_ms']} ms",
            f"üìã –û—á–µ—Ä–µ–¥—å: {diag['queue_length']} –∑–∞–¥–∞—á",
            f"üîó Device URI: <code>{diag['device_uri']}</code>"
        ]
        return await message.reply("<b>üõ† –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:</b>\n" + "\n".join(lines))

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞
    return await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞. /printer <list|ping|status|diagnostic>")
