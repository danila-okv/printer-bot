from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from modules.decorators import admin_only
from modules.analytics.logger import warning, error, action, info
from modules.ui.keyboards.tracker import send_managed_message
router = Router()

class MessageUserState(StatesGroup):
    waiting_for_text = State()
    waiting_for_confirmation = State()

@router.message(Command("m"))
@admin_only
async def start_message_to_user(message: Message, state: FSMContext):
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /m user_id")
        warning(
            message.from_user.id,
            "Command /m",
            "Wrong syntax"
        )
        return

    user_id = int(parts[1])
    await state.set_state(MessageUserState.waiting_for_text)
    await state.update_data(target_user_id=user_id)
    await message.answer(f"‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>.")
    action(
        message.from_user.id,
        "Command /m",
        f"Start texting to user {user_id}"
    )

@router.message(MessageUserState.waiting_for_text)
@admin_only
async def receive_message_text(message: Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    await state.set_state(MessageUserState.waiting_for_confirmation)
    await message.answer(
        f"üì® –¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É? –ù–∞–ø–∏—à–∏ <b>–¥–∞</b> –∏–ª–∏ <b>–Ω–µ—Ç</b>."
    )
    info(
        message.from_user.id,
        "Command /m",
        f"Waiting for message confirmation"
    )
    

@router.message(MessageUserState.waiting_for_confirmation, F.text.lower() == "–¥–∞")
@admin_only
async def confirm_and_send(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["target_user_id"]
    text = data["message_text"]

    try:
        await send_managed_message(
            message.bot,
            user_id,
            text
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        action(
            message.from_user.id,
            "Command /m",
            f"Message sent to {user_id}: {text}"
        )
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await state.clear()
        error(
            message.from_user.id,
            "Command /m",
            f"Failed to send message to {user_id}: {e}"
        )
    await state.clear()

@router.message(MessageUserState.waiting_for_confirmation, F.text.lower() == "–Ω–µ—Ç")
@admin_only
async def cancel_send(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    action(
            message.from_user.id,
            "Command /m",
            f"Canceled message send"
        )
    await state.clear()
