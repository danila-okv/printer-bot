from functools import wraps
from aiogram import types
from db import get_connection

from config import ADMIN_IDS
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from modules.ui.messages import ACCESS_DENIED_TEXT
from modules.ui.handlers.main_menu import send_main_menu
from modules.ui.keyboards.tracker import send_managed_message
from modules.analytics.logger import warning
def check_paused(func):
    @wraps(func)
    async def wrapper(event, *args, **kwargs):
        from modules.admin.bot_control import is_paused, get_pause_reason, queue_action

        if is_paused():
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
            user_id = event.from_user.id

            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è
            if isinstance(event, types.Message):
                action_text = event.text or "<no text>"
            elif isinstance(event, types.CallbackQuery):
                action_text = event.data or "<no data>"
            else:
                action_text = "<unknown action>"

            # –∫–ª–∞–¥—ë–º –≤ –æ—á–µ—Ä–µ–¥—å
            queue_action(user_id, action_text)

            # –ø—Ä–∏—á–∏–Ω–∞ –ø–∞—É–∑—ã
            reason = get_pause_reason() or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if isinstance(event, types.Message):
                await event.reply(
                    f"üöß –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ¬´{reason}¬ª\n"
                    "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –∫–∞–∫ —Ç–æ–ª—å–∫–æ —è –≤–æ–∑–æ–±–Ω–æ–≤–ª—é —Ä–∞–±–æ—Ç—É, –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ–± —ç—Ç–æ–º."
                )
            else:  # CallbackQuery
                # –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É
                await event.answer(
                    f"üöß –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ¬´{reason}¬ª\n"
                    "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –Ω–∞–ø–æ–º–Ω—é –≤–∞–º, –∫–æ–≥–¥–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏–º —Ä–∞–±–æ—Ç—É.",
                    show_alert=True
                )
            return  # –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä

        # –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ
        return await func(event, *args, **kwargs)

    return wrapper


REQUIRED_PRINT_FIELDS = ("file_name", "file_path", "page_count", "price")

def ensure_data(func):
    @wraps(func)
    async def wrapper(update, state: FSMContext, *args, **kwargs):
        user_id = update.from_user.id
        bot = update.bot
        data = await state.get_data()

        if not all(data.get(k) for k in REQUIRED_PRINT_FIELDS):
            await state.clear()
            warning(
                user_id=user_id,
                handler=f"ensure_data:{func.__name__}",
                msg="Data lost"
            )

            if isinstance(update, CallbackQuery):
                await update.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.")
            else:
                await update.answer("‚ùå –î–∞–Ω–Ω—ã–µ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.")

            await send_main_menu(bot, user_id)
            return

        return await func(update, state, data, *args, **kwargs)

    return wrapper

def admin_only(handler):
    @wraps(handler)
    async def wrapper(event, *args, **kwargs):
        user_id = getattr(event.from_user, "id", None)

        if user_id not in ADMIN_IDS:
            try:
                if isinstance(event, Message):
                    await send_managed_message(
                        bot=event.bot,
                        user_id=user_id,
                        text=ACCESS_DENIED_TEXT
                        )
                elif isinstance(event, CallbackQuery):
                    return
            except TelegramBadRequest:
                pass
            return
        return await handler(event, *args, **kwargs)
    return wrapper
